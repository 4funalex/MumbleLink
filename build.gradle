buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        flatDir name:'ExternalJars',dirs:'jars'
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.9.0'
        classpath ':liteloader:1.7.10'
    }
}

ext.mcversion = "1.7.10"
ext.forgeversion = "10.13.0.1180"
version = "4.1.1"

apply plugin: 'forge'
apply plugin: 'liteloader'


archivesBaseName = "$name-LIBS"

minecraft {
    version = mcversion + "-" + forgeversion
    assetDir = "run/assets"
}

import org.ajoberstar.grgit.*

ext.actualVersion = version

if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft.version}-$version." + System.getenv("BUILD_NUMBER")
    actualVersion += "." + System.getenv("BUILD_NUMBER")
} else if (new File(rootProject.projectDir, '.git').exists()) {       
    ext.repo = Grgit.open(rootProject.projectDir)
    version = "${minecraft.version}-$version-${repo.log().find().abbreviatedId}"
    actualVersion += "-${repo.log().find().abbreviatedId}"
} else {
    version = "${minecraft.version}-$version"
}

configurations {
    includeInJar
}
dependencies {
    includeInJar 'net.java.dev.jna:jna:4.0.0'
    compile configurations.includeInJar
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    archivesBaseName = rootProject.name + "-" + name.toUpperCase()
    //version = rootProject.version

    dependencies {
        compile rootProject
    }

    rootProject.reobf {
        reobf(jar) { spec ->
            spec.classpath = sourceSets.main.compileClasspath
        }
    }
}

processResources {
    inputs.files("build.gradle")

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'
        include '**/*.lang'
        include '**/*.txt' // buggy matching of marker symbols

        expand([
                'version': actualVersion,
                'mcversion': mcversion,
                'forgeversion': forgeversion,
                'date': new SimpleDateFormat("yyyy-MM-dd").format(new Date()),
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
        exclude '**/*.lang'
        exclude '**/*.txt' // buggy matching of marker symbols
    }
}

allprojects {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    jar {
        inputs.files(rootProject.file("build.gradle"))

        manifest {
            attributes 'Implementation-Title': project.name
            attributes 'Implementation-Version': actualVersion
        }
    }

    task sourceJar(type: Jar) {
        outputs.dir libsDir

        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        outputs.dir libsDir

        from 'build/docs/javadoc'
        classifier = 'javadoc'
    }

    task deobfJar(type: Jar) {
        outputs.dir libsDir

        from sourceSets.main.output
        classifier = 'deobf'
    }

    if(sourceSets.main != null) {
        build.dependsOn sourceJar, javadocJar, deobfJar
    }

    artifacts {
        archives sourceJar
        archives javadocJar
        archives deobfJar
    }

}

import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

import java.text.SimpleDateFormat

task clearJars {
    FileTree tree = fileTree(libsDir)
    tree.each {
        it.delete()
    }
}

task allJar(type: Jar, dependsOn: [clearJars, subprojects.build, rootProject.reobf]) {
    inputs.dir libsDir
    inputs.files("build.gradle")

    //def oldArchiveName = archiveName
    baseName = rootProject.name// + "-ALL"
    def libsDir = new File(rootProject.getBuildDir(), 'libs')

    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': rootProject.actualVersion
    }

    doFirst {
        FileTree tree = fileTree(libsDir)
        //tree.exclude "**/$oldArchiveName"
        tree.exclude "**/$archiveName"
        tree.exclude "**/*javadoc.jar"
        tree.exclude "**/*sources.jar"
        tree.exclude "**/*deobf.jar"
        println "merging: "

        def JsonBuilder jb = new JsonBuilder()
        def slurper = new JsonSlurper()
        tree.each {
            println it
            FileTree archive = zipTree(it).matching { exclude "mcmod.info" }

            FileTree metaDataFile = zipTree(it).matching { include "mcmod.info" }

            if (!metaDataFile.empty) {
                def metaDataJson = slurper.parse(new FileReader(metaDataFile.getSingleFile()))
                if (jb.content == null) {
                    jb.call(metaDataJson)
                } else {
                    jb.call(jb.content + metaDataJson)
                }
            }

            from archive
        }

        def tmpDir = new File(rootProject.getBuildDir(), "tmp/$name")
        def metaDataCollection = new File(tmpDir, "mcmod.info")
        metaDataCollection.write(jb.toPrettyString())

        from metaDataCollection
    }
}

artifacts {
    archives allJar
}

project.subprojects.each { p ->
    p.tasks.withType(Jar)*.each { t ->
        t.destinationDir = new File(rootProject.getBuildDir(), 'libs')
    }
}

jar {
    from zipTree(configurations.includeInJar.singleFile)
    from zipTree('jars/natives.jar')
}