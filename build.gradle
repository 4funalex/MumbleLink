buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.1-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.7.0-SNAPSHOT'
    }
}

mcversion = "1.7.2"
String forgeversion = "10.12.0.1034"
version = "4.0.5"

apply plugin: 'forge'
apply plugin: 'grgit'

archivesBaseName = "MumbleLink"

minecraft {
    version = mcversion + "-" + forgeversion
    assetDir = "run/assets"
}

actualVersion = version

if (System.getenv("BUILD_NUMBER") != null) {
    version = "${minecraft.version}-$version." + System.getenv("BUILD_NUMBER")
    actualVersion += "." + System.getenv("BUILD_NUMBER")
} else if (new File(projectDir, '.git').exists()) {
    def repo = grgit.repo('.')
    version = "${minecraft.version}-$version-${repo.history.log().find().abbreviatedId}"
    actualVersion += "-${repo.history.log().find().abbreviatedId}"
} else {
    version = "${minecraft.version}-$version"
}

configurations {
    includeInJar
}
dependencies {
    includeInJar 'net.java.dev.jna:jna:4.0.0'
    compile configurations.includeInJar
}

jar {
    from zipTree(configurations.includeInJar.singleFile)
    from zipTree('jars/natives.jar')
    from zipTree('jars/natives.jar')
}

subprojects {
    apply plugin: 'java'

    archivesBaseName = "MumbleLink-" + name.toUpperCase()
    //version = rootProject.version

    dependencies {
        compile rootProject
    }

    rootProject.reobf {
        reobf(jar) { spec ->
            spec.classpath = sourceSets.main.compileClasspath
        }
    }
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'
        include '**/*.lang'
        //include '**/*.txt' // buggy matching of marker symbols

        expand([
                'version': actualVersion,
                'mcversion': mcversion
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
        exclude '**/*.lang'
        //exclude '**/*.txt' // buggy matching of marker symbols
    }
}

allprojects {
    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    jar {
        manifest {
            attributes 'Implementation-Title': project.name
            attributes 'Implementation-Version': actualVersion
        }
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from 'build/docs/javadoc'
        classifier = 'javadoc'
    }

    task deobfJar(type: Jar) {
        from sourceSets.main.output
        classifier = 'deobf'
    }

    build.dependsOn sourceJar, javadocJar, deobfJar

    artifacts {
        archives sourceJar
        archives javadocJar
        archives deobfJar
    }

}

project.subprojects.each { p ->
    p.tasks.withType(Jar)*.each { t ->
        t.destinationDir = new File(rootProject.getBuildDir(), 'libs')
    }
}